Variable -> 	
		Syntax ->
			Date_Type  variable_name  =  Value;
			
			ex. String name = "Disha";
			    int age = 23;
		
		* The names used to refer to data stored in the memory.
		* One Java variable can hold only a single type of data.
		* It means to assign data to a particular memory and use a name for that memory.
	Rules for Name of Variable -> Name of the Variable write in CamelCase i.e.,(dishaBardiya)
		
		Rule 1 -> Variable Name should not begin with the Number.
			  ex. int 1st_Num; -> Wrong Way.
			      int Num_1st; -> Correct Way.
		Rule 2 -> Whitespace is not permitted in Variable Name.
		     	  ex. int money borrowed -> Wrong Way.
			      int money_borrowed -> Correct Way.
		Rule 3 -> A Java Keyword(reserved Word) Cannot be used as a Variable Name.
			  ex. int public = 10000; 	-> Wrong Way.
			      int population = 10000;	-> Correct Way.
		Rule 4 -> It is Preffered to use Variable names with more than one word with all lowerCase letters for the first
			  word and Capitalization of the first letter of each subsequent word.
			  ex. camelCase.
		Rule 5 -> When creating Variable,it is preffered to give meaningful names.
			  ex. int a;	-> Wrong Way.
			      int age;	-> Correct Way.
		Rule 6 -> All lowercase letters should be used when creating one word variable name.
			  ex. int Age;	-> Wrong Way.
			      int age; 	-> Correct Way.


Data Type -> 
		
		Syntax ->
			Date_Type  variable_name  =  Value;
			
			ex. String name = "Disha";
			    int age = 23;
		
		Two Types ->
			1) Primitive Data Type / Built in Data Type
				* Hold Single Value.
				* Cannot be Divided.
			   
			    1 Byte 	= 	8 Bits.
			    - boolean	-> 	1 Byte.(true/false).
			    - char	-> 	2 Byte. (Supports the Unicode).
			    - byte 	-> 	8 bits.
			    - short 	-> 	2 Byte.
			    - int 	-> 	4 Byte.
			    - long 	-> 	8 Byte.
			    - float 	-> 	4 Byte.
			    - double 	-> 	8 Byte.
			
			2) Non-Primitive Data Type / User Defined Data Type
				* Memory Address of Variable.
				* Complicated
				
			    - String
			    - Array 
			    - Classes
			    - Interface


Array ->
		* Array is the collection of similar type of data.
		* It is a data structure which stores a collection of homogenous(similar) items.
		* It is a Indexing based(start from 0 index).
		* Memory allocation is Contigious.
		* Starting Address of first data and name of the array is same.
	
		* Representation of Array -> data_type[] name_of_array;
					     ex. int[] ages;
		
		* Array Declaration -> data_type[] array_name = new data_type[size];
				       ex. int[] ages = new int[5];
				       - 'new' keyword is used for new memory allocation in Heap Area.
		* Array Literal -> With Curly braces we can initialize the array and add value to is during
		                   Initialization without defining the size.
				   ex. int[] ages = {20,21,22,23,24};
		* Memory Allocation in Arrays -> int[] age = new int[3]
					
					| 10 | 20 | 30 |
				       100  104  108  111
			-> In above example, Array is of Integer data type having the size 3.
			-> 12 byte of memory is required for this Array.
		* Accessing Elements in Single Dimensional Array ->
			
			-> 0-based Indexing.
			-> int[] ages = new int[5];
			-> | 10 | 20 | 30 | 40 | 50 |	
			-> ages[0] = 10		ages[3] = 40
			   ages[1] = 20		ages[4] = 50
			   ages[2] = 30
		* Array Types ->
			
			1) Single Dimensional or One Dimensional Array.
			2) Multidimensional Array or Array of Array or more than one Dimension.
				-> 2D Array.
				-> 3D Array.
		* Initializing and Accessing the elements of 1D and 2D Array.
			1D Array ->
				int[] ages = new int[5];
				int[] ages = {1,2,3};
			2D Array -> 
				int[][] multiArray = new int[size_row][size_col]
				ex.int[][] multiArray = new int[3][4];
				| 1 | 2 |	multiArray[0][0] = 1	multiArray[1][1] = 4
				| 3 | 4 |	multiArray[0][1] = 2	multiArray[2][0] = 5
				| 5 | 6 |	multiArray[1][0] = 3	multiArray[2][1] = 6
		* Traversing through the Array :
			- We can use loops to traverse through the Array.
			- There are many ways to iterate over the Array.
			- The most common ways of looping through arrays.
				1) for-loop
				2) for each loop
				3) while loop
			1) for-Loop
				for(int i=0; i<ages.length; i++){
					System.out.println(ages[i]);
				}
			2) for-each loop
				for(int age:ages){
					System.out.println(age);
				}
			3) while-loop
				int i=0;
				while(i<ages.length){
					System.out.println(ages[i]);
					i++
				}


Statements ->
		1) if 
			syntax ->
				if(condition){
					//code or body
				}
		2) if-else
			
			syntax ->
				if(condition){
					//code or body
				}else{
					//code or body
				}
		3) if-else-if
			
			syntax ->
				if(condition 1){
					//code or body
				}else if(condition 2){
					// code or body
				}
		4) swich
			
			syntax -> 
				switch(expression){
					case x:
						//code
						break;
					case y:
						//code
						break;
					default:
						//code
						break;
				}



Operators ->
		
		- Unary Operator -> Pre Increment,Pre Decrement,Post Increment and Post Decrement.
		- Binary Operator -> Arithmetic,Relational,Logical and Bitwise Operator.
		- Ternary Operator -> (x>y) ? x : y.
		
		1) Arithmetic Operator ->
			* Addition (+)
			* Substraction (-)
			* Multiplication (*)
			* Division (/)
			* Modulus (%)
		2) Relational Operator ->
			* is Equal to (==)
			* Not Equal to (!=)
			* Greater than (>)
			* Less than (<)
			* Greater than equal to (>=)
			* Less than equal to (<=)
		3) Logical Operator ->
			* Logical AND (&&)
			* Logical OR (||)
			* Logical NOT (!)
		   Truth Table for Logical AND (&&) ->
		   					false	false -> false
		   					true	false -> false
							false	true  -> false
							true	true  -> true
		   Truth Table for Logical AND (||) ->
		   					false	false -> false
		   					true	false -> true
							false	true  -> true
							true	true  -> true
							
			
		4) Bitwise Operator ->
			* AND (&)
			* OR (|)
			* XOR (^)
			* Left Shift (<<)
			* Right Shift (>>)
		   Truth Table for Bitwise AND (&) ->
		   					false	false -> false
		   					true	false -> false
							false	true  -> false
							true	true  -> true
		   Truth Table for Bitwise OR (|) ->
		   					false	false -> false
		   					true	false -> true
							false	true  -> true
							true	true  -> true
		   Truth Table for Bitwise XOR (^) ->
		   					false	false -> false
		   					true	false -> true
							false	true  -> true
							true	true  -> false
